<?php

/**
 * @file
 * Code for the node_weight module.
 */

use Drupal\node\Entity\Node;
use Drupal\field\Entity\FieldConfig;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Implements hook_entity_operation().
 *
 * Creates 'Manage order' operation for content types at /admin/structure/types.
 */
function node_weight_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'node_type' &&  \Drupal::currentUser()->hasPermission('assign node weight')) {
    $operations['order'] = [
      'title' => t('Manage order'),
      'weight' => 40,
      'url' => Url::fromRoute('node_weight.order', ['node_type' => $entity->id()]),
    ];
  }
}

/**
 * Checks if node weight is enabled for given node type.
 *
 * @param string $node_type
 *   The node type id.
 *
 * @return bool
 *   TRUE if node weight is enabled for given node type, FALSE otherwise.
 */
function node_weight_node_type_enabled($node_type) {
  $config = \Drupal::config('node_weight.settings');
  $node_type_objects = $config->get('node_weight.checked_node_types') ?: [];
  if (array_search($node_type, array_values($node_type_objects), TRUE) !== FALSE) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Adds given node type to config.node_weight.checked_node_types.
 *
 * @param string $node_type
 *   The node type id.
 */
function node_weight_add_node_type_to_config($node_type) {
  $config = \Drupal::service('config.factory')
    ->getEditable('node_weight.settings');
  $node_type_objects = $config->get('node_weight.checked_node_types') ?: [];
  array_push($node_type_objects, $node_type);
  $config->set('node_weight.checked_node_types', $node_type_objects);
  $config->save();
}

/**
 * Removes given node type from config.node_weight.checked_node_types.
 *
 * @param string $node_type
 *   The node type id.
 */
function node_weight_remove_node_type_from_config($node_type) {
  $config = \Drupal::service('config.factory')
    ->getEditable('node_weight.settings');
  $node_type_objects = $config->get('node_weight.checked_node_types') ?: [];
  unset($node_type_objects[array_search($node_type, $node_type_objects)]);
  $config->set('node_weight.checked_node_types', $node_type_objects);
  $config->save();
}

/**
 * Creates field_node_weight for given node_type.
 *
 * @param string $node_type
 *   The node type id.
 */
function node_weight_create_field_node_weight($node_type) {
  $field_storage = FieldStorageConfig::loadByName('node', 'field_node_weight');
  $field = FieldConfig::loadByName('node', $node_type, 'field_node_weight');

  if (empty($field)) {
    FieldConfig::create([
      'field_storage' => $field_storage,
      'field_name' => 'field_node_weight',
      'entity_type' => 'node',
      'bundle' => $node_type,
      'label' => t('Weight'),
      'type' => 'integer',
      'cardinality' => 1,
      'default_value' => 0,
      'settings' => [
        'min' => -100,
        'max' => 100,
      ],
    ])->save();

    // Set field widget to weight_selector.
    \Drupal::entityTypeManager()
      ->getStorage('entity_form_display')
      ->load('node.' . $node_type . '.default')
      ->setComponent('field_node_weight', ['type' => 'weight_selector'])
      ->save();
  }
}

/**
 * Removes field field_node_weight from given node_type.
 *
 * @param string $node_type
 *   The node type id.
 */
function node_weight_delete_field_node_weight($node_type) {
  $field = FieldConfig::loadByName('node', $node_type, 'field_node_weight');
  if ($field) {
    $field->delete();
  }
}

/**
 * Sets field value.
 *
 * @param int $nid
 *   The node id.
 * @param string $field_name
 *   Name of the field.
 * @param mixed $value
 *   Value to set.
 */
function node_weight_set_node_field_value($nid, $field_name, $value) {
  $node = Node::load($nid);
  $node->set($field_name, $value);
  $node->save();
}

/**
 * Implements hook_form_FORM_ID_form_alter().
 *
 * Adds options to the node_type_form for editing default node options.
 */
function node_weight_form_node_type_edit_form_alter(&$form, $form_state, $form_id) {
  $node_type = $form['type']['#default_value'];
  $form['weight_settings'] = node_weight_content_type_form_build($node_type);
  $form['actions']['submit']['#submit'][] = 'node_weight_form_node_type_add_form_submit';
}

/**
 * Additional submit handler function for node_type_form().
 */
function node_weight_form_node_type_edit_form_submit($form, &$form_state) {
  node_weight_content_type_form_submit($form['type']['#default_value'], $form_state->getValue('weight_enabled'));
}

/**
 * Implements hook_form_FORM_ID_form_alter().
 *
 * Adds weight settings form to details of the node_type_add_form.
 */
function node_weight_form_node_type_add_form_alter(&$form, $form_state, $form_id) {
  $node_type = $form['type']['#default_value'];
  $form['weight_settings'] = node_weight_content_type_form_build($node_type);
  $form['actions']['submit']['#submit'][] = 'node_weight_form_node_type_add_form_submit';
  $form['actions']['save_continue']['#submit'][] = 'node_weight_form_node_type_add_form_submit';
}

/**
 * Additional submit handler function for node_type_form().
 */
function node_weight_form_node_type_add_form_submit($form, &$form_state) {
  node_weight_content_type_form_submit($form_state->getValue(['type']), $form_state->getValue('weight_enabled'));
}

/**
 * Node Weight settings form.
 *
 * @params string $node_type
 *  The node type id
 */
function node_weight_content_type_form_build($node_type) {
  $available = node_weight_node_type_enabled($node_type);

  $form = [
    '#type' => 'details',
    '#title' => t('Weight Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#access' => \Drupal::currentUser()
      ->hasPermission('administer node weight'),
  ];
  $form['weight_enabled'] = [
    '#type' => 'radios',
    '#title' => t('Enable'),
    '#description' => t('Enable weight for this content type?'),
    '#options' => [t('No'), t('Yes')],
    '#default_value' => ($available) ? 1 : 0,
  ];

  return $form;
}

/**
 * Node Weight content type form submit handler.
 *
 * @params string $node_type
 *     The node type id
 *
 * @params bool $weight_enabled
 *    TRUE if node_weight has to be enabled, FALSE otherwise
 */
function node_weight_content_type_form_submit($node_type, $weight_enabled) {
  if ($weight_enabled) {
    node_weight_create_field_node_weight($node_type);
    if (!node_weight_node_type_enabled($node_type)) {
      node_weight_add_node_type_to_config($node_type);
    }
  }
  else {
    node_weight_delete_field_node_weight($node_type);
    if (node_weight_node_type_enabled($node_type)) {
      node_weight_remove_node_type_from_config($node_type);
    }
  }
}
